apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-image
spec:
  workspaces:
    - name: ca-cert
      mountPath: /etc/pki/tls/certs/
    - name: source
  params:
    - name: TAG_TO_BE_SIGNED
      type: string
  steps:
    # - name: custom-bom
    #   image: registry.access.redhat.com/ubi8-minimal:8.10-1018
    #   workingDir: $(workspaces.source.path)
    #   script: |
    #     curl http://images.pexels.com/photos/1000366/pexels-photo-1000366.jpeg\?auto\=compress\&cs\=tinysrgb\&w\=1260\&h\=750\&dpr\=1 -o img.jpeg
    - name: sbom-creation
      image: registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9:1.4.1-1718010833
      workingDir: $(workspaces.source.path)
      script: |
        echo "SBOM creation"

        syft -o spdx-json quay.io/jpmaida1/ping-pong:$(params.TAG_TO_BE_SIGNED) > ping-pong.sbom
    - name: attach-and-attest-and-sign
      image: 'image-registry.openshift-image-registry.svc:5000/cicd/rhtas-cosign-rhel9:1.0.2-1719417920'
      workingDir: $(workspaces.source.path)
      env:
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: keyless-signing-info
              key: CLIENT_SECRET
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: keyless-signing-info
              key: CLIENT_ID
        - name: SIGNER
          valueFrom:
            secretKeyRef:
              name: keyless-signing-info
              key: USER
        - name: PASS
          valueFrom:
            secretKeyRef:
              name: keyless-signing-info
              key: PASSWORD
      script: |
        echo "Initializing..."

        export TUF_URL="https://tuf-trusted-artifact-signer.apps-crc.testing"
        export OIDC_ISSUER_URL="https://keycloak-sso.apps-crc.testing/auth/realms/trusted-artifact-signer"
        export COSIGN_FULCIO_URL="https://fulcio-server-trusted-artifact-signer.apps-crc.testing"
        export COSIGN_REKOR_URL="https://rekor-server-trusted-artifact-signer.apps-crc.testing"
        export COSIGN_MIRROR="https://tuf-trusted-artifact-signer.apps-crc.testing"
        export COSIGN_ROOT="https://tuf-trusted-artifact-signer.apps-crc.testing/root.json"
        export COSIGN_OIDC_CLIENT_ID="trusted-artifact-signer"
        export COSIGN_OIDC_ISSUER="https://keycloak-sso.apps-crc.testing/auth/realms/trusted-artifact-signer"
        export COSIGN_CERTIFICATE_OIDC_ISSUER="https://keycloak-sso.apps-crc.testing/auth/realms/trusted-artifact-signer"
        export COSIGN_YES="true"
        export SIGSTORE_FULCIO_URL="https://fulcio-server-trusted-artifact-signer.apps-crc.testing"
        export SIGSTORE_OIDC_ISSUER="https://keycloak-sso.apps-crc.testing/auth/realms/trusted-artifact-signer"
        export SIGSTORE_REKOR_URL="https://rekor-server-trusted-artifact-signer.apps-crc.testing"
        export REKOR_REKOR_SERVER="https://rekor-server-trusted-artifact-signer.apps-crc.testing"

        cosign initialize

        echo "Obtaining OIDC token..."

        export KEYCLOAK_URL=$OIDC_ISSUER_URL/protocol/openid-connect/token

        RESPONSE=$(curl -v -k -X POST "$KEYCLOAK_URL" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=password" \
          -d "client_id=$CLIENT_ID" \
          -d "client_secret=$CLIENT_SECRET" \
          -d "username=$SIGNER" \
          -d "password=$PASS")

        TOKEN=$(echo $RESPONSE | grep -o '"access_token":"[^"]*' | awk -F'"' '{print $4}')
        export SIGSTORE_ID_TOKEN=$TOKEN
        
        echo "Attaching SBOM..."
        cosign attach sbom --sbom ping-pong.sbom quay.io/jpmaida1/ping-pong:$(params.TAG_TO_BE_SIGNED)

        echo "Attesting..."
        cosign attest --predicate ping-pong.sbom quay.io/jpmaida1/ping-pong:$(params.TAG_TO_BE_SIGNED)
        
        # This is a custom attestation based on a random imagem from the internet. This proves that's possible to generate attestations based on whatever you want.
        # cosign attest --predicate img.jpeg quay.io/jpmaida1/ping-pong:$(params.TAG_TO_BE_SIGNED)
        
        # echo "Signing..."
        cosign sign -y quay.io/jpmaida1/ping-pong:$(params.TAG_TO_BE_SIGNED)
